{
  "version": 3,
  "sources": ["../../../src/main.ts"],
  "sourcesContent": ["import \"cubing/twisty\";\nimport { TwistyPlayer } from \"cubing/twisty\";\nimport { Node } from \"./node\";\nimport { RubiksCube } from \"./cube\";\n\nclass App {\n  nodeMap: Map<string, Node> = new Map();\n\n  constructor() {\n    this.createNodes(\"\");\n  }\n\n  alreadyExistsDifferently(alg: string): string | null {\n    var value = null;\n    Array.from(this.nodeMap.keys()).some((key) => {\n      var cube1 = new RubiksCube()\n      var cube2 = new RubiksCube()\n      cube1.applyMoves(key);\n      cube2.applyMoves(alg);\n      if (cube1.areEqual(cube2)) {\n        console.log(\"Already exists\", key);\n        value = key;\n        return true;\n      }\n      cube1.applyMoves(\"U2\");\n      if (cube1.areEqual(cube2)) {\n        console.log(\"Already exists\", key);\n        value = key;\n        return true;\n      }\n      cube1.applyMoves(\"D2\");\n      if (cube1.areEqual(cube2)) {\n        console.log(\"Already exists\", key);\n        value = key;\n        return true;\n      }\n      cube1.applyMoves(\"U2\");\n      if (cube1.areEqual(cube2)) {\n        console.log(\"Already exists\", key);\n        value = key;\n        return true;\n      }\n      cube1.applyMoves(\"U' D'\");\n      if (cube1.areEqual(cube2)) {\n        console.log(\"Already exists\", key);\n        value = key;\n        return true;\n      }\n      cube1.applyMoves(\"U2\");\n      if (cube1.areEqual(cube2)) {\n        console.log(\"Already exists\", key);\n        value = key;\n        return true;\n      }\n      cube1.applyMoves(\"D2\");\n      if (cube1.areEqual(cube2)) {\n        console.log(\"Already exists\", key);\n        value = key;\n        return true;\n      }\n      cube1.applyMoves(\"U2\");\n      if (cube1.areEqual(cube2)) {\n        console.log(\"Already exists\", key);\n        value = key;\n        return true;\n      }\n      cube1 = new RubiksCube()\n      cube1.applyMoves(\"U2\");\n      cube2 = new RubiksCube()\n      cube1.applyMoves(key);\n      cube2.applyMoves(alg);\n      if (cube1.areEqual(cube2)) {\n        console.log(\"Already exists\", key);\n        value = key;\n        return true;\n      }\n      cube1.applyMoves(\"U2\");\n      if (cube1.areEqual(cube2)) {\n        console.log(\"Already exists\", key);\n        value = key;\n        return true;\n      }\n      cube1.applyMoves(\"D2\");\n      if (cube1.areEqual(cube2)) {\n        console.log(\"Already exists\", key);\n        value = key;\n        return true;\n      }\n      cube1.applyMoves(\"U2\");\n      if (cube1.areEqual(cube2)) {\n        console.log(\"Already exists\", key);\n        value = key;\n        return true;\n      }\n      cube1.applyMoves(\"U' D'\");\n      if (cube1.areEqual(cube2)) {\n        console.log(\"Already exists\", key);\n        value = key;\n        return true;\n      }\n      cube1.applyMoves(\"U2\");\n      if (cube1.areEqual(cube2)) {\n        console.log(\"Already exists\", key);\n        value = key;\n        return true;\n      }\n      cube1.applyMoves(\"D2\");\n      if (cube1.areEqual(cube2)) {\n        console.log(\"Already exists\", key);\n        value = key;\n        return true;\n      }\n      cube1.applyMoves(\"U2\");\n      if (cube1.areEqual(cube2)) {\n        console.log(\"Already exists\", key);\n        value = key;\n        return true;\n      }\n      cube1 = new RubiksCube()\n      cube1.applyMoves(\"D2\");\n      cube2 = new RubiksCube()\n      cube1.applyMoves(key);\n      cube2.applyMoves(alg);\n      if (cube1.areEqual(cube2)) {\n        console.log(\"Already exists\", key);\n        value = key;\n        return true;\n      }\n      cube1.applyMoves(\"U2\");\n      if (cube1.areEqual(cube2)) {\n        console.log(\"Already exists\", key);\n        value = key;\n        return true;\n      }\n      cube1.applyMoves(\"D2\");\n      if (cube1.areEqual(cube2)) {\n        console.log(\"Already exists\", key);\n        value = key;\n        return true;\n      }\n      cube1.applyMoves(\"U2\");\n      if (cube1.areEqual(cube2)) {\n        console.log(\"Already exists\", key);\n        value = key;\n        return true;\n      }\n      cube1.applyMoves(\"U' D'\");\n      if (cube1.areEqual(cube2)) {\n        console.log(\"Already exists\", key);\n        value = key;\n        return true;\n      }\n      cube1.applyMoves(\"U2\");\n      if (cube1.areEqual(cube2)) {\n        console.log(\"Already exists\", key);\n        value = key;\n        return true;\n      }\n      cube1.applyMoves(\"D2\");\n      if (cube1.areEqual(cube2)) {\n        console.log(\"Already exists\", key);\n        value = key;\n        return true;\n      }\n      cube1.applyMoves(\"U2\");\n      if (cube1.areEqual(cube2)) {\n        console.log(\"Already exists\", key);\n        value = key;\n        return true;\n      }\n      return false;\n    }\n    );\n    return value;\n  }\n\n  createNodes(alg: string, prevNode?: Node) {\n    if (this.nodeMap.has(alg.trim())) {\n      console.log(\"Already exists\", alg.trim());\n      // connectNodes(this.nodeMap.get(alg), prevNode);\n      return;\n    }\n    const matched = this.alreadyExistsDifferently(alg.trim());\n    if (matched !== null) {\n      console.log(\"Already written differently\", alg.trim() + \" as \" + matched);\n      // connectNodes(this.nodeMap.get(matched), prevNode);\n      return;\n    }\n    if (alg.trim().split(\" \").length > 3) {\n      return;\n    }\n    const splitAlg = alg.split(\" \");\n    const lastMove = splitAlg[splitAlg.length - 1];\n    const node = new Node(alg.trim());\n    this.nodeMap.set(alg.trim(), node);\n    console.log(this.nodeMap);\n    if (prevNode) {\n      // connectNodes(node, prevNode);\n    }\n    if (lastMove !== \"U2\") {\n      this.createNodes(alg.trim() + \" U2\");\n    }\n    if (lastMove !== \"D2\") {\n      this.createNodes(alg.trim() + \" D2\");\n    }\n    if (lastMove !== \"F2\") {\n      this.createNodes(alg.trim() + \" F2\");\n    }\n    if (lastMove !== \"B2\") {\n      this.createNodes(alg.trim() + \" B2\");\n    }\n    if (lastMove !== \"R2\") {\n      this.createNodes(alg.trim() + \" R2\");\n    }\n    if (lastMove !== \"L2\") {\n      this.createNodes(alg.trim() + \" L2\");\n    }\n  }\n}\n\nglobalThis.app = new App();\n"],
  "mappings": "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",
  "names": []
}
